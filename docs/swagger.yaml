basePath: /v1
definitions:
  response.BookmarkAttr:
    properties:
      post_id:
        type: string
    type: object
  response.BookmarkData:
    properties:
      attributes:
        $ref: '#/definitions/response.BookmarkAttr'
      id:
        type: string
      links:
        $ref: '#/definitions/response.BookmarkLinks'
      type:
        $ref: '#/definitions/shared.DataType'
    type: object
  response.BookmarkLinks:
    properties:
      self:
        type: string
    type: object
  response.BookmarkResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.BookmarkData'
        type: array
    type: object
  router.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  shared.DataType:
    enum:
    - user
    - post
    - follow
    - token
    - bookmark
    type: string
    x-enum-varnames:
    - DataTypeUser
    - DataTypePost
    - DataTypeFollow
    - DataTypeToken
    - DataTypeBookmark
host: localhost:3001
info:
  contact:
    name: Frens Repo
    url: http://www.github.com/bwoff11/frens
  description: ActivityPub social network API
  license:
    name: MIT License
    url: http://www.github.com/bwoff11/frens/docs/LICENSE.md
  termsOfService: http://swagger.io/terms/
  title: Frens API
  version: "1.0"
paths:
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided account details.
      parameters:
      - description: The user account to create
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/router.CreateUserRequest'
      - in: formData
        name: email
        type: string
      - in: formData
        name: password
        type: string
      - in: formData
        name: phone
        type: string
      - in: formData
        name: username
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: User Registration
      tags:
      - Auth
  /auth/verify:
    get:
      consumes:
      - application/json
      description: Verify the validity of the provided JWT token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Verify Token
      tags:
      - Auth
  /blocks:
    get:
      consumes:
      - application/json
      description: Search for blocks with query parameters. If no query parameters
        are provided, all blocks will be returned. Since blocks are private, only
        the authenticated user's blocks will be returned.
      parameters:
      - description: The number of blocks to return.
        in: query
        name: count
        type: string
      - description: The number of blocks to offset the returned blocks by.
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Search Blocks
      tags:
      - Blocks
  /bookmarks:
    get:
      consumes:
      - application/json
      description: Search for bookmarks with query parameters. If no query parameters
        are provided, all bookmarks will be returned. Since bookmarks are private,
        only the authenticated user's bookmarks will be returned.
      parameters:
      - description: The ID of a specific bookmark to retrieve
        in: query
        name: bookmarkID
        type: string
      - description: The number of bookmarks to return.
        in: query
        name: count
        type: string
      - description: The number of bookmarks to offset the returned bookmarks by.
          For example, offset=10&count=10 would return bookmarks 10-20
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BookmarkResponse'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Search Bookmarks
      tags:
      - Bookmarks
  /feeds/algorithmic:
    get:
      consumes:
      - application/json
      description: Get posts based on a particular algorithm (Not Implemented)
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get algorithm-based feed
      tags:
      - Feed
  /feeds/chronological:
    get:
      consumes:
      - application/json
      description: Get posts in a chronological order
      parameters:
      - description: Cursor for pagination
        in: query
        name: cursor
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get chronological feed
      tags:
      - Feed
  /feeds/explore:
    get:
      consumes:
      - application/json
      description: Get posts for the explore section (Not Implemented)
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get explore feed
      tags:
      - Feed
  /files:
    get:
      consumes:
      - application/json
      description: Search for files with query parameters. If no query parameters
        are provided, all files will be returned.
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Search Files
      tags:
      - Files
    post:
      consumes:
      - multipart/form-data
      description: Create a new file from the provided form data
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Create a new file
      tags:
      - Files
  /files/{fileID}:
    delete:
      consumes:
      - application/json
      description: Delete a specific file using its ID
      parameters:
      - description: File ID
        in: path
        name: fileID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Delete a file by ID
      tags:
      - Files
  /likes:
    get:
      consumes:
      - application/json
      description: Retrieve likes. If a like ID is provided, it is always used. Otherwise,
        a postID will return all likes for that post. If a userID is also provided,
        it will return either the like for that user/post or an empty array. If only
        a userID is provided, it will return all likes by that user for any post.
      parameters:
      - description: Like ID
        in: query
        name: likeID
        type: string
      - description: Post ID
        in: query
        name: postID
        type: string
      - description: User ID
        in: query
        name: userID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Search Likes
      tags:
      - Likes
  /login:
    post:
      consumes:
      - application/json
      - text/xml
      - application/x-www-form-urlencoded
      - multipart/form-data
      description: Authenticate a user with the given credentials and return a JWT
        token.
      parameters:
      - description: Username
        in: body
        name: username
        required: true
        schema:
          type: string
      - description: Username
        in: formData
        name: username
        required: true
        type: string
      - description: Password
        in: body
        name: password
        required: true
        schema:
          type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: User Login
      tags:
      - Auth
  /posts:
    get:
      consumes:
      - application/json
      description: Search for posts with query parameters.
      parameters:
      - description: Post ID
        in: query
        name: postID
        type: string
      - description: User ID
        in: query
        name: userID
        type: string
      - description: The number of posts to return.
        in: query
        name: count
        type: string
      - description: The number of posts to offset the returned posts by.
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Search Posts
      tags:
      - Posts
    post:
      consumes:
      - application/json
      description: Create a new post.
      parameters:
      - description: The text of the post
        in: body
        name: text
        required: true
        schema:
          type: string
      - description: The privacy setting of the post
        in: body
        name: privacy
        required: true
        schema:
          type: string
      - description: The UUIDs of the media files attached to the post
        in: body
        name: mediaIDs
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Create a post
      tags:
      - Posts
  /posts/{postID}:
    delete:
      consumes:
      - application/json
      description: Delete a post.
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Delete a post
      tags:
      - Posts
    put:
      consumes:
      - application/json
      description: Update an existing post.
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Update a post
      tags:
      - Posts
  /posts/{postID}/bookmarks:
    delete:
      consumes:
      - application/json
      description: Delete a bookmark for a post.
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Delete a bookmark
      tags:
      - Bookmarks
    post:
      consumes:
      - application/json
      description: Create a new bookmark for a post.
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Create a bookmark
      tags:
      - Bookmarks
  /posts/{postID}/likes:
    post:
      consumes:
      - application/json
      description: Create a new like for a post.
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Create a like
      tags:
      - Likes
  /posts/{postID}/likes/{likeID}:
    delete:
      consumes:
      - application/json
      description: Delete a like for a post.
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      - description: Like ID
        in: path
        name: likeID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Delete a like
      tags:
      - Likes
  /users/{userID}:
    get:
      consumes:
      - application/json
      description: Fetch a specific user by their ID.
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get a user by ID
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Update a users information including bio, avatar, and cover. Note
        that avatar and cover must first be uploaded to the server and UUIDs must
        be provided.
      parameters:
      - description: Bio
        in: body
        name: bio
        schema:
          type: string
      - description: Bio
        in: formData
        name: bio
        type: string
      - description: Avatar ID
        in: body
        name: avatarID
        schema:
          type: string
      - description: Avatar ID
        in: formData
        name: avatarID
        type: string
      - description: Cover ID
        in: body
        name: coverID
        schema:
          type: string
      - description: Cover ID
        in: formData
        name: coverID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Update a user
      tags:
      - Users
  /users/{userID}/blocks:
    delete:
      consumes:
      - application/json
      description: Unblock a user by their ID.
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Unblock a user
      tags:
      - Blocks
    post:
      consumes:
      - application/json
      description: Block a user by their ID.
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Block a user
      tags:
      - Blocks
  /users/{userID}/followers:
    delete:
      consumes:
      - application/json
      description: Unfollow a user by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Unfollow a user by user ID
      tags:
      - Followers
    get:
      consumes:
      - application/json
      description: Get a list of all users that are following a user by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get users that are being followed by the user.
      tags:
      - Followers
    post:
      consumes:
      - application/json
      description: Follow a user by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Follow a user by user ID
      tags:
      - Followers
  /users/{userID}/following:
    get:
      consumes:
      - application/json
      description: Get a list of all users that a user is following by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get users that are following the user
      tags:
      - Followers
  /users/{userID}/likes:
    get:
      consumes:
      - application/json
      description: Get likes by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: The number of likes to return.
        in: query
        name: count
        type: string
      - description: The number of likes to offset the returned likes by.
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get likes by user ID
      tags:
      - Likes
  /users/self:
    delete:
      consumes:
      - application/json
      description: Delete the user associated with the provided access token.
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Delete self
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Fetch information about the user making the request
      produces:
      - application/json
      responses:
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
      security:
      - ApiKeyAuth: []
      summary: Get information about the authenticated user
      tags:
      - Users
swagger: "2.0"
